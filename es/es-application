### 居于lucence实现es
- pom
~~~
<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core -->
            <!--搜索引擎-->
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-core</artifactId>
                <version>8.4.1</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser -->
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-queryparser</artifactId>
                <version>8.4.1</version>
            </dependency>
~~~
- demo
~~~
 public static void main(String[] args) {
     String indexDir="D:\\cert\\elasticSearchData";
//     createIndex(indexDir);
   /*  String jsonDoc= "{\n"+
             "\"myName\": \" is Dawn\",\n" +
             "\"singer\": \" Dawn\",\n"+
             "\"company\": \"Come on Dawn\",\n"+
             "}";
     indeDoc(indexDir,jsonDoc);*/
   //搜索文档
    query(indexDir,"dawn");
    }

    //创建索引
    public static void  createIndex(String indexDir){
        try {
            //准备目录
            Directory dir = FSDirectory.open(Paths.get(indexDir));
            // 准备分词器
            Analyzer analyzer = new StandardAnalyzer();
            //准备config
            IndexWriterConfig iwConfig= new IndexWriterConfig(analyzer);
            //创建索引
            IndexWriter indexWriter = new IndexWriter(dir,iwConfig);
            indexWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //索引文档
    public static void indeDoc(String indexDir,String jsonDoc){
        try {
            //准备目录
            Directory dir = FSDirectory.open(Paths.get(indexDir));
            // 准备分词器
            Analyzer analyzer = new StandardAnalyzer();
            //准备config
            IndexWriterConfig iwConfig= new IndexWriterConfig(analyzer);
            //创建索引
            IndexWriter writer = new IndexWriter(dir,iwConfig);

           /* //创建索引文档
            Document doc = new Document();
            doc.add(new TextField(key,value, Field.Store.YES));
            writer.addDocument(doc);*/

            Document doc = Json2Doc(jsonDoc);
            writer.addDocument(doc);
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static Document Json2Doc(String strDoc){
        Document doc = new Document();
        JSONObject jsonDoc = JSONObject.parseObject(strDoc);
        Set<String> keys = jsonDoc.keySet();

        for(String key:keys){
            doc.add(new TextField(key,jsonDoc.getString(key),Field.Store.YES));
        }
        return doc;
    }

    //搜索文档
    public static String query(String indexDir,String queryStr){
        String result="";

        try {
            //准备目录
            Directory dir = FSDirectory.open(Paths.get(indexDir));
            //拿到indexreader实例
            IndexReader reader = DirectoryReader.open(dir);
            IndexSearcher searcher = new IndexSearcher(reader);
            Analyzer analyzer = new StandardAnalyzer();

            QueryParser parser = new QueryParser("singer",analyzer);
            Query query = parser.parse(queryStr);

            TopDocs hits = searcher.search(query,10);

            for (ScoreDoc scoreDoc:hits.scoreDocs){
                //拿到文档
                Document doc = searcher.doc(scoreDoc.doc);
                List<IndexableField> fields = doc.getFields();
                for(IndexableField f:fields){
                    result += f.name()+ ":" + f.stringValue()+ ",\r\n";
                }
                System.out.println(result);
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }

        return result;
    }
~~~
